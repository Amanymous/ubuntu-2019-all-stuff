{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","SearchField","target","value","state","bind","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2TAGaA,G,YAAK,SAAAC,GAAK,OACnB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UACTC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEH,4BAAKL,EAAMI,QAAQE,MAC3B,2BAAIN,EAAMI,QAAQG,UCMLC,EAAS,SAAAR,GAAK,OAEvB,yBAAKC,UAAU,aACVD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAI3B,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,SCnB3BQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACrB,2BACIb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCgOHG,G,wDA7Db,aAAe,IAAD,8BACZ,gBAwBJH,aAAa,SAACI,GACZ,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAxBpC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAY,IAEd,EAAKN,aAAa,EAAKA,aAAaU,KAAlB,gBANN,E,gEAQM,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKV,SAAS,CAAEV,SAAUoB,S,+BAkBjC,IAAD,EAC0BC,KAAKP,MAA5Bd,EADH,EACGA,SAASW,EADZ,EACYA,YAEXW,EAAiBtB,EAASuB,QAAO,SAAA5B,GAAO,OAC9CA,EAAQE,KAAK2B,cAAcC,SAASd,EAAYa,kBAIhD,OACE,yBAAKhC,UAAU,OACb,2CACA,kBAAC,EAAD,CACAY,YAAY,iBACZC,aAAcgB,KAAKhB,eAajB,kBAAC,EAAD,CAAUL,SAAUsB,S,GAxDZI,cC9JEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.91b9dc14.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card=props=>(\n    <div className=\"card-container\">\n        <img alt=\"monster\" \n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n        />\n        <h2>{props.monster.name}</h2>\n<p>{props.monster.email}</p>\n\n    </div>\n);","// ====================Section 5================================\n// import React from 'react';\n// import './card-list.styles.css';\n\n// export const CardList=props=>{\n//     console.log(props)\n//     // yahan props.children is waja sy likha \n//     //  CardList ky name='Aman' ha taky ye isko print kary\n//     return <div className='card-list'>{props.children}</div>\n// }\n// =====================Section 6==============================\nimport React from 'react';\nimport './card-list.styles.css';\nimport { Card } from '../card/card.component'\n\nexport const CardList=props=>(\n    //yahan return statement nai ha is waja () use kiye hain\n    <div className=\"card-list\">\n        {props.monsters.map(monster=>(\n            // <h1 key={monster.id}>{monster.name}</h1>\n            // h1 ko is waja sy comment kiya ku ky card.component.jsx\n            // Card name prop banaya ha\n        <Card key={monster.id} monster={monster}/>\n        ))}\n    </div>\n);","import React from 'react';\nimport './search.styles.css';\n\nexport const SearchBox = ({placeholder,handleChange}) =>(\n    <input \n        className=\"search\"\n        type='search' \n        placeholder={placeholder}\n        onChange={handleChange}\n        />\n)","// ====================Section 2=================\n// import React, { Component } from \"react\";\n// import \"./App.css\";\n\n// class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       monsters: [\n//         {\n//           name: \"Frankenstein\",\n//           id: \"1\"\n//         },\n//         {\n//           name: \"Dracula\",\n//           id: \"2\"\n//         },\n//         {\n//           name: \"Zombie\",\n//           id: \"3\"\n//         },\n//       ]\n//     };\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         {this.state.monsters.map(monster => (\n//           <h1 key={monster.id}> {monster.name}</h1>\n//         ))}\n//       </div>\n//     );\n//   }\n// }\n// export default App;\n\n\n\n\n//==================Section 1========================\n// import React, { Component } from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\n// class App extends Component{\n//   constructor(){\n//       super()\n//           this.state={\n//               string:'hi there'\n//           }\n//       }\n\n// render(){\n//   // div ma className is waja sy likhty hain taky class\n//   // or class component ma farak pta chaly\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         {/* this state string ko print karwany ka method ha ya */}\n//         {this.state.string}\n//         <button onClick={()=>this.setState({string:'hi aman'})}>Change text</button>\n//       </header>\n//     </div>\n//   );\n// }}\n\n// export default App;\n\n // =============Section 3 ==================\n// import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n// // mane yaha sy component method \n// // hata ky React.Component use kiya ha\n// class App extends React.Component{\n//   constructor(){\n//       super()\n//           this.state={\n//               string:'hi there'\n//           }\n//       }\n\n// render(){\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         {this.state.string}\n//         <button onClick={()=>this.setState({string:'hi aman'})}>Change text</button>\n//       </header>\n//     </div>\n//   );\n// }}\n// //  jsonplaceholder.typicode.com/users\n// export default App;\n\n\n// =============Section 4 life cycle methods ==================\n// import React, { Component } from \"react\";\n// import \"./App.css\";\n\n// class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       monsters: []\n//     };\n//   }\n// // componentDidMount ye life cycle method hain\n//   componentDidMount(){\n//     fetch('https://jsonplaceholder.typicode.com/users')\n//     .then(response=>response.json())\n//   // means ky promise karraha ha json format ma return hoga\n//     // .then(users=>console.log(users))\n//     .then(users=>this.setState({ monsters: users}))\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         {this.state.monsters.map(monster => (\n//           <h1 key={monster.id}> {monster.name}</h1>\n//         ))}\n//       </div>\n//     );\n//   }\n// }\n// export default App;\n\n// =================Section 5 Monster App========================\n// import React, { Component } from \"react\";\n// import { CardList } from './components/card-list/card-list.component';\n\n// import \"./App.css\";\n\n// class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       monsters: []\n//     };\n//   }\n//   componentDidMount(){\n//     fetch('https://jsonplaceholder.typicode.com/users')\n//     .then(response=>response.json())\n//     .then(users=>this.setState({ monsters: users}))\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <CardList name='Aman'>\n//           <h1>Aman</h1>\n//         {this.state.monsters.map(monster => (\n//           <h1 key={monster.id}> {monster.name}</h1>\n//         ))}\n//          </CardList>\n//       </div>\n//     );\n//   }\n// }\n// export default App;\n// =========================Section 6=================================\nimport React, { Component } from \"react\";\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      SearchField:''\n    };\n    this.handleChange=this.handleChange.bind(this);\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>response.json())\n    .then(users=>this.setState({ monsters: users}))\n  }\n// onChange={e=>console.log(e.target.value)}/>\n// ye on console sy onChange ma check karny ka tarika ha\n\n// onChange={e => { \n//   this.setState({SearchField:e.target.value},\n//     ()=>\n//   console.log(this.state))\n//   }}\n// onChangethis.setState({SearchField:e.target.value},()=>\n// is waja sy likha tha ku ky search feild ma jb koi word \n// enter karty hain to console ma phely \" \" empty na ay  \n  \nhandleChange=(e)=>{\n  this.setState({ SearchField: e.target.value })\n}\n\nrender() {\n    const { monsters,SearchField }=this.state;\n    //smart way to write it monster,SearchField \n    const filteredMonsters=monsters.filter(monster=>\n    monster.name.toLowerCase().includes(SearchField.toLowerCase())\n    )\n    // const monsters=this.state.monsters;\n    // const SearchField=this.state.SearchField;\n    return (\n      <div className=\"App\">\n        <h1>Monster Hub</h1>\n        <SearchBox \n        placeholder='search monster'\n        handleChange={this.handleChange}\n        // handleChange={e =>this.setState({ SearchField: e.target.value})}\n        // ye is wja sy comment out kiya ha ku render ky uper handleChange ka function ha\n          />\n\n        {/* <input \n        type='search' \n        placeholder='search monsters'\n        onChange={e =>this.setState({SearchField:e.target.value})}\n        /> */} \n        {/* ye sara kam comment is waja sy kiya h\n        ku ky search-box ky folder ma shift kardiya ha */}\n          {/* <CardList monsters={this.state.monsters}/> */}\n          <CardList monsters={filteredMonsters}/>\n\n      </div>\n    );\n  }\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}